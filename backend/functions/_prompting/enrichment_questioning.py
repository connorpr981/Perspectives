from typing import Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field
from _llm.models.message_models import Messages
from _llm.llm_processing import get_response
from _utils.firestore_utils import get_firestore_client
import traceback
import logging
from _helpers.question_helper import generate_questions, format_section_for_questioning
from datetime import datetime

current_date = datetime.now().strftime("%Y-%m-%d")

### RESPONSE MODELS ###

class EnrichmentQuestion(BaseModel):
    question: str = Field(..., description="The enrichment question")
    information_type: Literal["factual", "conceptual", "historical", "cultural"] = Field(
        ...,
        description="The type of information the question seeks: 'factual' for specific data, 'conceptual' for explaining ideas, 'historical' for background, or 'cultural' for societal context"
    )
    requires_current_info: bool = Field(..., description="Whether the question requires up-to-date information")

class EnrichmentQuestions(BaseModel):
    """
    Represents questions generated for a specific turn in the transcript.

    Attributes:
        turn_index (int): The index of the turn in the transcript.
        enrichment_questions (List[EnrichmentQuestion]): List of questions that enrich the reader's understanding.
    """
    turn_index: int = Field(..., description="The index of the turn in the transcript")
    enrichment_questions: List[EnrichmentQuestion] = Field(
        ...,
        min_items=1,
        max_items=4,
        description="List of 1-4 questions that provide additional information to enrich the reader's understanding of the topic."
    )

class SectionQuestions(BaseModel):
    """
    Represents a collection of questions for a section of the transcript.

    Attributes:
        questions (Optional[List[EnrichmentQuestions]]): A list of EnrichmentQuestions objects for the transcript section, if any.
    """
    questions: Optional[List[EnrichmentQuestions]] = Field(None, description="A list of questions for the transcript section, if any")

### PROMPTS ###

QUESTIONING_SYSTEM_PROMPT = """You are an expert in generating concise, informative questions based on interview topics. Your task is to create enrichment questions for each turn in the given transcript section. Today's date is {current_date}.

Goal: Enhance the reader's knowledge with brief, informative tidbits related to the topics discussed, without summarizing the transcript or inviting debate.

Guidelines for Enrichment Questions:
1. Generate 1-4 questions per turn.
2. Questions should:
   - Provide additional, factual information that enhances understanding of the topic.
   - Be simple, concise, and straightforward (no compound questions).
   - Focus on facts, concepts, historical context, or cultural significance.
   - Be answerable in 1-3 sentences with a clear, verifiable response.
   - Help the reader become a more educated consumer of the information presented.

3. Ensuring Answerability:
   - Target specific, verifiable facts or concepts.
   - Ask for clear definitions, explanations of single ideas, or specific examples.
   - Focus on quantifiable data, established theories, or well-documented events.
   - Avoid subjective interpretations or opinions.

4. For each question, specify:
   a) Information type:
      - Factual: specific data or statistics
      - Conceptual: explaining established ideas or theories
      - Historical: providing factual background or context
      - Cultural: exploring documented societal implications or significance
   b) Whether it requires current information (true/false)
      - Consider the current date when determining this

Examples of Good Enrichment Questions:
1. "What percentage of global electricity was generated by wind power in 2020?" (Factual, Current: true)
2. "What is the primary mechanism of action for mRNA vaccines?" (Conceptual, Current: false)
3. "In which year was the first successful CRISPR gene editing experiment performed?" (Historical, Current: false)
4. "What is the average lifespan of a lithium-ion battery in an electric vehicle?" (Factual, Current: true)
5. "How does Moore's Law relate to computer processor development?" (Conceptual, Current: false)
6. "What was the peak global internet traffic in 2023, measured in exabytes per day?" (Factual, Current: true)
7. "What is the fundamental principle behind quantum cryptography?" (Conceptual, Current: false)
8. "When was the first artificial neural network created, and by whom?" (Historical, Current: false)

Examples of Bad Enrichment Questions:
1. "Is artificial intelligence beneficial for society?" (Too subjective, not falsifiable)
2. "What are all the applications of blockchain technology?" (Too broad, not answerable concisely)
3. "How will quantum computing change the world?" (Speculative, not based on current facts)
4. "Can you explain the entire history of the internet?" (Too broad for a concise answer)
5. "What did the guest say about renewable energy?" (Directly references the transcript)

Remember:
- Questions should be related to the general topic of the turn but not directly reference the transcript content.
- Aim for a mix of question types across the section to provide a well-rounded enrichment experience.
- Each question should be crafted to elicit a concise, focused, and verifiable response.
- Use the current date to determine if a question requires up-to-date information.

This transcript section has {num_turns} turns. Generate questions for all turns in the section.
"""

QUESTIONING_USER_PROMPT = """Generate enrichment questions for the following transcript section topics:

{formatted_section}

Structure your response using the SectionQuestions model, ensuring each turn has 1-4 enrichment questions with the appropriate information type and current information requirement specified.
"""

### FUNCTIONS ###

def get_questions_for_section(section_data: Dict[str, Any]) -> Optional[List[EnrichmentQuestions]]:
    try:
        formatted_section = format_section_for_questioning(section_data)
        
        questioning_messages = Messages()
        questioning_messages.add_system_message(QUESTIONING_SYSTEM_PROMPT.format(num_turns=len(section_data['turns']), current_date=current_date))
        questioning_messages.add_user_message(QUESTIONING_USER_PROMPT.format(formatted_section=formatted_section))
        
        response, _ = get_response(
            provider="anthropic",
            messages=questioning_messages,
            response_model=SectionQuestions
        )

        return response.questions
    except Exception as e:
        error_message = f"Error in get_questions_for_section: {str(e)}\n{traceback.format_exc()}"
        logging.error(error_message)
        raise

def get_enrichment_questions(transcript_id: str, test_mode: bool = False) -> List[EnrichmentQuestions]:
    return generate_questions(transcript_id, get_questions_for_section, "enrichment", test_mode)